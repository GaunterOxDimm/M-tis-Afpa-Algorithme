*** Notice that we invite the user to interact with the functions, by using ``` let variable = window.prompt("", ""); ``` all along these exercises. ***

/* EXERCICE 1

Dessinez à l’aide de l’outil graphique, la piscine et sa clôture demandées par le client. */

function prix(espaceL, espacel, longueurPiscine, largeurPiscine) {
  console.log(((2 * (2 * espacel + largeurPiscine)) + 2 * (2 * espaceL + longueurPiscine)) * 120);
}
prix(1, 1, 1, 1); // returns 1440

-----------------------------------------------------------------------------------------------

/* Exercice 2 :
L’utilisateur saisit le nombre de fois que l’on lance un dé à 6 faces numérotées de 1 à 6.
L’algorithme simule cette série de lancers, puis calcule et affiche la fréquence d’apparition de chaque nombre 1, 2, 3, 4, 5 et 6
Dans « Pratiquer l’algorithme », la fonction Aléatoire ( nombreMax ) permet d’obtenir un nombre aléatoire entre 1 et nombreMax. */

let arr = [];     // Declare an empty array on the global scope

function random(lancer) {
  for(let i = 0; i < lancer; i++) {                       // Loop with "i" for each throw until reach "lancer" time
    arr.push(Math.floor(Math.random(i) * (6 - 1) + 1));   // Push the random numbers from "1" to "lancer", on the "arr" variable
  }
  return arr; 
}

function frequ(arr) {   // Pass the new "arr" array into the function "frequ()"
  let arrF = [];        // Declare another empty array "arrF" to store the frequency values for each number 
  let face1 = 0;           // Declare a variable to count the frequency, for each dice face
  let face2 = 0;
  let face3 = 0;
  let face4 = 0;
  let face5 = 0;
  let face6 = 0;
      for(let i = 0; i < arr.length; i++) {     // Loop into "arr" to match each index
        if(arr[i] == 1) {
          face1++; 
        } else if(arr[i] == 2) {
          face2++; 
        } else if(arr[i] == 3) {
          face3++; 
        } else if(arr[i] == 4) {
          face4++; 
        } else if(arr[i] == 5) {
          face5++; 
        } else if(arr[i] == 6) {
          face6++; 
        }
      }
  arrF.push("Face 1: " + (face1 / arr.length) * 100 + " %", "Face 2: " + (face2 / arr.length) * 100 + " %", "Face 3: " + (face3 / arr.length) * 100 + " %", "Face 4: " + (face4 / arr.length) * 100 + " %", "Face 5: " + (face5 / arr.length) * 100 + " %", "Face 6: " + (face6 / arr.length) * 100 + " %"); // Push the ratio of each frequency by the total of throws, in "arrF"
  return arrF;
 }

console.log(random(10)) // [ 4, 2, 4, 1, 4, 3, 5, 1, 1, 2 ]
console.log(frequ(arr)) // returns  [ 'Face 1: 30 %',
                                      'Face 2: 20 %',
                                      'Face 3: 10 %',
                                      'Face 4: 30 %',
                                      'Face 5: 10 %',
                                      'Face 6: 0 %' ]

-----------------------------------------------------------------------------------------------

/* Exercice 4 :
Ecrire un algorithme permettant de résoudre le problème suivant : – Données : un tableau contenant 20 entiers
– Résultat : “vrai” si les entiers sont consécutifs et “faux” sinon.
 On va donc parcourir le tableau et écrire vrai ou faux suivant la condition énoncée. Rappel : deux entiers sont 
consécutifs si le deuxième est égal au premier + 1.*/

function consecutive(arr) {
  for(let i = 0; i < arr.length; i++) {
    if(arr[i + 1] == arr[i] + 1){
       console.log("vrai");
    } else {
      console.log("faux");
    }
  
  }
}
consecutive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);
// returns vrai, vrai, vrai, vrai, vrai, vrai, vrai, vrai,vrai, vrai, vrai, vrai,vrai, vrai, vrai, vrai,vrai, vrai, vrai, vrai, faux
consecutive([2, 3, 4, 5, 6, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);
// vrai, vrai, vrai, vrai, faux, faux, vrai, vrai, vrai, vrai, vrai, vrai, vrai, vrai, vrai, vrai, vrai, vrai, vrai, vrai, faux


-----------------------------------------------------------------------------------------------

//Exercice 7 :
/* Trier un tableau :
Écrire un algorithme permettant de trier les éléments contenus dans un tableau.
Vous pourrez vous inspirer des algorithmes classiques de tris que vous trouverez sur le web. 
Un des plus simple étant le tri à bulle ....Avec un peu d’humour :*/

function consecutive(arr) {
    arr.sort(function(a, b){return a-b})
    arr.sort()
    return arr;
}
  consecutive(["oiuh", "lj", "kthrbjstd", "khgc"])
console.log(consecutive(["oiuh", "lj", "kthrbjstd", "khgc"]));         // returns [ 'khgc', 'kthrbjstd', 'lj', 'oiuh' ]
consecutive([6, 9, 3, 0])
console.log(consecutive([6, 9, 3, 0]));          // returns [ 0, 3, 6, 9 ]

---------------------------------------- THE END --------------------------------------------------------------------
