IMBRICATION (exercons-nous!)

Nous allons √©crire un algorithme qui demandera √† l'utilisateur le nombre de lignes qu'il d√©sire 
et affichera les r√©sultats suivant lorsqu'il en sera demand√© 6 puis 9.
Attention, il est demand√© de contr√¥ler que l'utilisateur saisisse bien une valeur autoris√©e !

                !!!!!!!!!! PAS COMPRIS L'EXO üßë‚Äçüíª !!!!!!!!!!!!!!!

-----------------------------------------------------------------------------------------



Exercice 3 (serie 02 -Algorithmique-exercices)


La population des Sims Alpha est de 10.000.000 d‚Äôhabitants et elle augmente de 500.000 habitants par an.
Celle des Sims Beta est de 5.000.000 habitants et elle augmente de 3% par an.
Ecrire un algorithme permettant de d√©terminer dans combien d‚Äôann√©es la population de Sims Beta d√©passera celle des Sims Alpha.

?????????????????????????????????
let year;
let simsAlpha = function(year) {
  5 * 10^5 * year + 10^7;
  return year;
  }
let simsBeta = function (year) {
  1.5 * 10^5 * year + 5 * 10^6;
  return year;
  } 
for(let year = 0; year > -20; year--) {
  if(simsAlpha(year) === simsBeta(year)){
    console.log(year);
  } else {
    console.log("stop")
  }
}           !!!!!!!!!!!!!   le code est faux je n'ai pas r√©ussi cet exercice    !!!!!!!!!!!!!!!!!!!!

-----------------------------------------------------------------------------------------

/* Exercice 5 : (serie 02 -Algorithmique-exercices)

Ecrire un algorithme permettant de r√©soudre le probl√®me suivant :
‚Äì Donn√©es : un tableau contenant 20 entiers
‚Äì R√©sultat : ‚Äúvrai‚Äù si le tableau est tri√© du plus petit au plus grand et ‚Äúfaux‚Äù sinon*/

function consecutive(arr) {
    if(arr.sort(function(a, b){return a-b}) == arr){
      return "vrai";
    } else {
      return "faux";
    }
  
}                !!!!!!!!!!!!!   le code est faux je n'ai pas r√©ussi cet exercice    !!!!!!!!!!!!!!!!!!!!


-----------------------------------------------------------------------------------------


/*Exercice 6 :
Suppression des doublons
√âcrire un algorithme permettant, √† partir d‚Äôune liste tri√©e comportant des doublons (√©l√©ments d√©j√† pr√©sents) arriver √† cr√©er la m√™me liste sans les doublons.
√Ä partir de la liste [3, 3, 6, 9, 9, 9, 9, 11], on obtiendra la liste [3, 6, 9, 11].


function kill2(arr) {
let newArr = [];
for(let i = 0; i < arr.length; i++)
if(arr[i] == arr[i + 1]){
i++;
} else {
newArr.push(arr[i]);
}
return newArr;
}
kill2([2, 8, 6, 6, 6, 6, 8, 0]);
console.log(kill2([2, 8, 6, 6, 6, 6, 9, 0])); // returns [ 2, 8, 9, 0 ] 


                         !!!!!!!!!!!!!   le code est faux je n'ai pas r√©ussi cet exercice    !!!!!!!!!!!!!!!!!!!!


-----------------------------------------------------------------------------------------


